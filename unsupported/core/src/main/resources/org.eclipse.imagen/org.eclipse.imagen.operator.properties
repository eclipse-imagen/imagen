#
# $RCSfile: org.eclipse.imagen.operator.properties,v $
#
# Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Revision: 1.1 $
# $Date: 2005-02-11 04:57:47 $
# $State: Exp $
#
DescriptorVersion=1.1
DescriptorVersion2=1.2

AWTImageDescriptor0=Converts a java.awt.Image into a rendered image.
AWTImageDescriptor1=The AWT image to be converted.
ColorQuantizerDescriptor0=Generates optimal lookup table and result image of nearest distance classification
ColorQuantizerDescriptor1=The quantization algorithm to be used.
ColorQuantizerDescriptor2=The expected maximum color number.
ColorQuantizerDescriptor3=The histogram size for median-cut; The train cycle for NeuQuant; The maximum tree size for Oct-Tree.
ColorQuantizerDescriptor4=The ROI in which the pixels are involved into the color quantization.
ColorQuantizerDescriptor5=The subsampling rate in x-direction. 
ColorQuantizerDescriptor6=The subsampling rate in y-direction.
ColorQuantizerDescriptor7=Invalid color quantization algorithm.
CompositeDescriptor0=Composites two images based on an alpha mask.
CompositeDescriptor1=The alpha image for the first source.
CompositeDescriptor2=The alpha image for the second source.
CompositeDescriptor3=True if alpha has been premultiplied to both sources and the destination.
CompositeDescriptor4=Indicates if the destination image should include an extra alpha channel, and if so, should it be the first or last band.
CompositeDescriptor8=operation requires the 2 sources to match in number of bands and data type.
CompositeDescriptor9=operation requires 4 parameters.
CompositeDescriptor10=operation requires source1Alpha parameter to be a valid input.
CompositeDescriptor11=operation requires source1Alpha parameter to be of class org.eclipse.imagen.PlanarImage.
CompositeDescriptor12=operation requires its first source and alpha image to match in dimensions.
CompositeDescriptor13=operation requires its first source and alpha image to match in data type.
CompositeDescriptor14=operation requires source2Alpha parameter to be of class org.eclipse.imagen.PlanarImage.
CompositeDescriptor15=operation requires its second source and alpha image to match in dimensions.
CompositeDescriptor16=operation requires its second source and alpha image to match in data type.
CompositeDescriptor17=operation requires alphaPremultiplied parameter to be of class java.lang.Boolean.
CompositeDescriptor18=operation requires alphaFirst parameter to be of class java.lang.Boolean.
ConjugateDescriptor0=Computes the complex conjugate of a complex image.
ConjugateDescriptor1=The source image must have an even number of bands.
DCTDescriptor0=Computes the discrete cosine transform of an image.
DFTDescriptor0=Computes the discrete Fourier transform of an image.
DFTDescriptor1=The type of scaling to perform.
DFTDescriptor2=The nature of the data.
DFTDescriptor3= operation does not support supplied scaling type.
DFTDescriptor4= operation does not support supplied data nature.
DFTDescriptor5= operation requires complex sources to have an even number of bands.
DilateDescriptor0=Performs binary kernel based Dilate operation on the image.
DilateDescriptor1=The binary convolution kernel.
DivideComplexDescriptor0=Compute the complex quotient of two images.
DivideComplexDescriptor1= operation requires its sources to have an even number of bands.
ErodeDescriptor0=Performs binary kernel based Erode operation on the image.
ErodeDescriptor1=The binary convolution kernel.
GradientMagnitudeDescriptor0=Computes the gradient of an image
GradientMagnitudeDescriptor1=kernels not of same dimensions
GradientMagnitudeDescriptor2=operation requires 2 parameters
IDCTDescriptor0=Computes the inverse discrete cosine transform of an image.
IDFTDescriptor0=Computes the inverse discrete Fourier transform of an image.
IDFTDescriptor1=The type of scaling to perform.
IDFTDescriptor2=The nature of the data.
IDFTDescriptor3= operation does not support supplied scaling type.
IDFTDescriptor4= operation does not support supplied data nature.
IDFTDescriptor5= operation requires complex sources to have an even number of bands.
IIPDescriptor0=Provides client support of the Internet Imaging Protocol in the rendered and renderable mode.
IIPDescriptor1=The URL of the IIP image.
IIPDescriptor2=The sub-images to be used by the server for images at each resolution level.
IIPDescriptor3=The filtering value.
IIPDescriptor4=The color twist matrix.
IIPDescriptor5=The contrast value.
IIPDescriptor6=The source rectangle of interest in rendering-independent coordinates.
IIPDescriptor7=The rendering-independent spatial orientation transform.
IIPDescriptor8=The aspect ratio of the destination image.
IIPDescriptor9=The destination rectangle of interest in rendering-independent coordinates.
IIPDescriptor10=The counterclockwise rotation angle to be applied to the destination.
IIPDescriptor11=The mirror axis.
IIPDescriptor12=The ICC profile used to represent the color space of the source image.
IIPDescriptor13=The JPEG quality factor.
IIPDescriptor14=The JPEG compression group index number.
IIPDescriptor15=requires the URL string to specify a valid protocol.
IIPDescriptor16=requires the colorTwist array to have at least 16 elements.
IIPDescriptor17=requires both the width and height of the rectangle that marks the region of interest to be greater than 0.
IIPDescriptor18=requires the rotation angle for the destination image to be one of 0, 90, 180, or 270 degrees.
IIPDescriptor19=requires the mirror axis to be either X or Y.
IIPDescriptor20=requires the contrast value to be greater than or equal to 1.0F.
IIPDescriptor21=requires the aspect ratio to be positive.
IIPDescriptor22=requires the JPEG quality factor to be in the range [0,100].
IIPDescriptor23=requires the JPEG table index to be in the range [1,255].
IIPDescriptor24=requires the transform parameter to be invertible.
IIPResolutionDescriptor0=Provides client support of the Internet Imaging Protocol in the rendered mode.
IIPResolutionDescriptor1=The URL of the IIP image.
IIPResolutionDescriptor2=The resolution level to request.
IIPResolutionDescriptor3=The sub-image to be used by the server.
ImageFunctionDescriptor0=Generates an image from a functional description.
ImageFunctionDescriptor1=The functional description.
ImageFunctionDescriptor2=The image width.
ImageFunctionDescriptor3=The image height.
ImageFunctionDescriptor4=The X scale factor.
ImageFunctionDescriptor5=The Y scale factor.
ImageFunctionDescriptor6=The X translation.
ImageFunctionDescriptor7=The Y translation.
MagnitudeDescriptor0=Find the magnitude of each pixel of an image.
MagnitudeDescriptor1= operation requires its source to have an even number of bands.
MagnitudeSquaredDescriptor0=Computes the squared magnitude of each pixel of a complex image.
MagnitudeSquaredDescriptor1= operation requires its source to have an even number of bands.
MatchCDFDescriptor0=Matches pixel values to a supplied CDF.
MatchCDFDescriptor1=The source histogram property is undefined.
MatchCDFDescriptor2=The source histogram property returns an object which is not a Histogram.
MatchCDFDescriptor3=The length of the CDF array must equal the number of bands in the source Histogram.
MatchCDFDescriptor4=The length of each component array of the CDF must equal the number of bins in the corresponding band of the source Histogram.
MatchCDFDescriptor5=All CDF values must be non-negative.
MatchCDFDescriptor6=The CDF array must represent a non-decreasing sequence.
MatchCDFDescriptor7=The ultimate CDF array value in each band must be 1.
MultiplyComplexDescriptor0=Computes the complex product of two images.
MultiplyComplexDescriptor1= operation requires its sources to have an even number of bands.
OverlayDescriptor0=Overlays one image on top of another.
OverlayDescriptor1=operation requires the two sources to match in number of bands and data type.
PhaseDescriptor0=Computes the phase angle of each pixel of an image.
PhaseDescriptor1= operation requires its source to have an even number of bands.
PeriodicShiftDescriptor0=Computes the periodic translation of an image.
PeriodicShiftDescriptor1=The displacement in the X direction.
PeriodicShiftDescriptor2=The displacement in the Y direction.
PeriodicShiftDescriptor3=Shift values must be non-negative and less than the corresponding image dimension.
PolarToComplexDescriptor0=Computes a complex image from a magnitude and a phase image.
PolarToComplexDescriptor1=operation requires its sources to have an equal number of bands.
SubsampleBinaryToGray0=To subsamples binary image to gray; reverse of dithering.
SubsampleBinaryToGray1=scaleX must be between 0 and 1, excluding 0.
SubsampleBinaryToGray2=scaleY must be between 0 and 1, excluding 0.
SubsampleBinaryToGray3=src image must have MultiPixelPackedSampleModel.
SubsampleAverageDescriptor0=Subsamples an image by averaging over a moving window.
SubsampleAverageDescriptor1=The X scale factor.
SubsampleAverageDescriptor2=The Y scale factor.
SubsampleAverageDescriptor3=modeName may not be null.
SubsampleAveragePropertyGenerator0=propertyName may not be null
SubsampleAveragePropertyGenerator1=opNode may not be null
SubsampleAveragePropertyGenerator2=Neither parameter may be null.
SubsampleAveragePropertyGenerator3= is not a supported class.